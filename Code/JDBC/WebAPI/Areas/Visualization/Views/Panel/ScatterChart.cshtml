<ul>
    <li id="Reload">Reload</li>
    <li id="ResetXScale">Reset X Scale</li>
    <li id="ResetYScale">Reset Y Scale</li>
    <li id="AllSameScale" class="showInFrame">All same scale</li>
    <li id="AllSameXScale" class="showInFrame">All same X scale</li>
    <li id="AllSameYScale" class="showInFrame">All same Y scale</li>
    <li id="OpenNewTab" class="showInFrame">Open in new tab</li>
</ul>

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {
            query = convertHashToObject();
            pathArray = query.paths.split(',');
            // 设置图表全局对象
            window.chartDom = document.getElementById('chartContainer');
            $('#title').text(query.title);
            var layout = {
                showlegend: true,
                height: $(window).height(),
                margin: { l: 30, r: 30, b: 0, t: 30, pad: 0 },
                hovermode: 'closest',
                legend: {
                    'orientation': 'h'
                }
            };
            Plotly.plot(chartDom, [], layout, { showTips: false, displayModeBar: true, displaylogo: false, scrollZoom: false, modeBarButtonsToRemove: ['sendDataToCloud', 'zoom2d', 'resetScale2d', 'hoverClosestCartesian', 'hoverCompareCartesian', 'lasso2d'] });

            for (var i = 0; i < pathArray.length; i++) {
                addTrace(idArray[i], query.from, query.to, true);
            }
            window.onhashchange = function () {
                query = convertHashToObject();
                var pathArrayNew = query.pathArray.split(',');
                for (var i = 0; i < pathArrayNew.length; i++) {
                    var index = pathArray.indexOf(pathArrayNew[i]);
                    if (index === -1) {//添加新的trace
                        addTrace(pathArrayNew[i], query.from, query.to, true);
                    } else {
                        delete pathArray[index];
                    }
                }
                for (var j = 0; j < chartDom.data.length; j++) {
                    var path = chartDom.data[j].path;
                    if (pathArray.indexOf(path) !== -1) {//删除不存在的trace
                        Plotly.deleteTraces(chartDom, j);
                    }
                }
            };
            chartDom.on('plotly_relayout', function (eventdata) {
                //console.log(eventdata);
                if (eventdata.width || eventdata.height) { //窗口尺寸不请求新数据
                    return;
                }
                if (eventdata.yaxis && !eventdata.xaxis) { //仅y轴缩放不请求新数据
                    return;
                } else if (!eventdata['xaxis.range[0]'] || !eventdata['xaxis.range[1]']) { //初始情况
                    eventdata['xaxis.range[0]'] = query.from;
                    eventdata['xaxis.range[1]'] = query.to;
                }
                chartDom.data = [];//清空数据
                for (var i = 0; i < idArray.length; i++) {
                    addTrace(idArray[i], eventdata['xaxis.range[0]'], eventdata['xaxis.range[1]']);
                }
            });
            function addTrace(path, start, end, init) {
                $('#loding').show();
                var url = "/data/path" + path + "?format=complex&__count=300";
                if (start) {
                    url += "&__start=" + start;
                }
                if (end) {
                    url += "&__end=" + end;
                }
                Plotly.d3.json(url, function (err, rawData) {
                    if (err) {
                        $('#title').text($('#title').text() + '：' + err.responseText).css('color', 'red');
                        $('#loding').fadeOut();
                        console.debug(err);
                        return;
                    }
                    var commaIndex = $('#title').text().indexOf('：');
                    if (commaIndex > -1) {
                        $('#title').text($('#title').text().substr(0, commaIndex)).css('color', 'black');
                    }
                    Plotly.addTraces(chartDom, {
                        x: Plotly.d3.range(rawData.Start, rawData.End + rawData.DecimatedSampleInterval, rawData.DecimatedSampleInterval),
                        y: rawData.Data,
                        type: 'scatter',
                        mode: 'markers',
                        name: rawData.Title,
                        id: id
                    }).then(function () {
                        if (init) {
                            chartDom.layout.minX = chartDom.layout.xaxis.range[0];
                            chartDom.layout.maxX = chartDom.layout.xaxis.range[1];
                            chartDom.layout.minY = chartDom.layout.yaxis.range[0];
                            chartDom.layout.maxY = chartDom.layout.yaxis.range[1];
                        }
                    });
                    $('#loding').fadeOut();
                });
            }
            //右键菜单
            $("#scopeMenu ul li").click(function () {
                switch ($(this).attr("id")) {
                    case 'Reload':
                        setAllRange(null, null);
                        break;
                    case 'ResetXScale':
                        setXRange([chartDom.layout.minX, chartDom.layout.maxX]);
                        break;
                    case 'ResetYScale':
                        setYRange([chartDom.layout.minY, chartDom.layout.maxY]);
                        break;
                    case 'AllSameScale':
                        window.parent.AllSameScale(query.title, chartDom.layout.xaxis.range, chartDom.layout.yaxis.range);
                        break;
                    case 'AllSameXScale':
                        window.parent.AllSameXScale(query.title, chartDom.layout.xaxis.range);
                        break;
                    case 'AllSameYScale':
                        window.parent.AllSameYScale(query.title, chartDom.layout.yaxis.range);
                        break;
                    case 'OpenNewTab':
                        window.open(location.href);
                        break;
                    default:
                        break;
                }
                $("#scopeMenu").fadeOut(200);
            });
        });
        window.setXRange = function (xrange) {
            var update = {
                'xaxis.range': xrange
            };
            Plotly.relayout(chartDom, update);
        }
        window.setYRange = function (yrange) {
            var update = {
                'yaxis.range': yrange
            };
            Plotly.relayout(chartDom, update);
        }
        window.setAllRange = function (xrange, yrange) {
            var update = {
                xaxis: { range: xrange },
                yaxis: { range: yrange }
            };
            Plotly.relayout(chartDom, update);
        }
    </script>
}
